<%- include('../layout/adminHeader') %>
<style>
  /* Style the button */
  .add-category-button {
      background-color: rgb(52, 194, 250);
      color: rgb(0, 0, 0);
      border: none;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 16px;
      border-radius: 5px;
  }

  /* Style the input field */
  .category-input {
      width: 400px;
      padding: 10px;
      border: 1px solid rgb(45, 188, 245);
      border-radius: 5px;
      font-size: 16px;
  }
</style>

<section class="section">
  <div class="container-fluid">
    <div class="title-wrapper pt-30">
      <div class="row align-items-center">
        <div class="col-md-6">
          <div class="title">
            <h3>Add New Category</h3><br>

            <form action="/admin/add-category" method="post" onsubmit="return validateForm()" class="reg-form" id="form" >
              <div class="input-group">
                <input type="text" class="form-control" id="category" name="categoryName" placeholder="Enter category name" 

                         style="width: 100%; max-width: 180px; padding: 8px; border-radius: 4px; border: 1px solid #ccc; box-sizing: border-box; font-size: 12px;" required>

                  <button type="submit" class="btn btn-info btn-sm input-group-btn">Add Category </button>
              </div>
            </form>

        <div id="validationMessage"><span></span></div>        
      </div>
    </div>

    <div class="row">
      <div class="col-lg-12">
        <div class="card-style mb-20">
          <h5 class="mb-10">Category List</h5>

          <div class="table-wrapper table-responsive">
            <table class="table">
              <thead>
                <tr>
                  <th>
                    <h4>Index</h4>
                  </th>
                  <th>
                    <h4>Category</h4>
                  </th>
                  <th>
                    <h4>Action</h4>
                  </th>
                </tr>
              </thead>
              <tbody>
                <% if(category.length > 0){ 
                    for(let i=0; i < category.length; i++){ 
                %>
                <tr>
                  <td class="min-width">
                    <h5><%= i+1 %></h5>
                  </td>
                  <td class="min-width">
                    <h5><%= category[i].name %></h5>
                  </td>
                  <td>
                    <div class="action">
                          <a class="btn-link" href="/admin/edit-category?id=<%=category[i]._id%>">EDIT</a>
                    </div>

                    <div class="action">
                      <form onsubmit="return submitForm('<%=i%>')" class="reg-form" id="form_<%=i%>">
                        <input type="hidden" name="id" id="catId" value="<%= category[i]._id %>">

                        <button type="submit" class="button-style <%= category[i].is_deleted ? 'text-success' : 'text-danger' %>"
                          data-action="<%= category[i].is_deleted ? 'true' : 'false' %>"
                          <i class="lni <%= category[i].is_deleted ? 'lni-unblock' : 'lni-block' %>"></i>
                          <%= category[i].is_deleted ? 'RESTORE' : 'DELETE' %>
                      </button>
                      
                    </form>
                    
                   </div>

                  </td>
                </tr>
                <% } %>
                <% } else { %>
                <tr>
                  <td colspan="3">Category not found</td>
                </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

  </div>
</section>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
 async function submitForm(index) {
    event.preventDefault();

    const form = document.getElementById(`form_${index}`);
    const button = form.querySelector('.button-style');

    if (!button) {
        console.error('Button not found in the form:', form);
        return false;
    }

    const action = button.getAttribute('data-action');
    const id = form.querySelector('#catId').value;

    if (action == 'true') {
      await confirmRestore(index);
    } else if (action == 'false') {
      await confirmDelete(index);
    }

    try {
        const response = await fetch('/admin/delete-category', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: id,
                action: action,
            }),
        });

        if (!response.ok) {
            showErrorAlert(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        //await showSuccessAlert(data.message);
        window.location.reload();
    } catch (error) {
        console.error('Error:', error);
        showErrorAlert('An error occurred while processing your request.');
    }

    return false;
}

  async function confirmDelete(index) {
        console.log('Confirm Delete called');
        return Swal.fire({
            title: 'Are you sure?',
            text: 'Deleting a category will also delete all associated products!',
            icon: 'warning',
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            customClass: {
                popup: 'small-swal',
            }
        });

    }

    async function confirmRestore(index) {
        console.log('Confirm Restore called');
        return Swal.fire({
            title: 'Are you sure?',
            text: 'Restoring a category will also restore all associated products!',
            icon: 'question',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, restore it!',
            customClass: {
                popup: 'small-swal',
            }
        });

    }
  function showSuccessAlert(message) {
      Swal.fire({
          icon: 'success',
          title: 'Success',
          text: message,
          showConfirmButton: false,
          timer: 2000
      });
  }

  function showErrorAlert(message) {
      Swal.fire({
          icon: 'error',
          title: 'Error',
          text: message,
          showConfirmButton: false,
          timer: 2000
      });
  }
</script>

<script>
  const nameRegex = /^[a-zA-Z0-9]+(?: [a-zA-Z0-9]+)*$/;
  
  function validateForm() {
      var categoryName = document.getElementById('category').value.trim();
      var validationMessage = document.getElementById('validationMessage');
  
      validationMessage.innerHTML = '';
  
      if (categoryName.length < 3) {
          showValidationMessage(validationMessage, 'Please use at least 3 characters.');
          return false; // Prevent form submission
      } else if (categoryName.length > 15) {
          showValidationMessage(validationMessage, 'Please use at most 15 characters.');
          return false; // Prevent form submission
      } else if (!nameRegex.test(categoryName)) {
          showValidationMessage(validationMessage, 'Invalid characters or consecutive spaces in category name.');
          return false; // Prevent form submission
      } else {
          hideValidationMessage(validationMessage);
          return true; // Allow form submission
      }
  }
  
  function showValidationMessage(element, message) {
      element.innerHTML = message;
      element.style.color = 'red'; // Customize the style as needed
  }
  
  function hideValidationMessage(element) {
      element.innerHTML = '';
  }
  
  const message = "<%= message %>";
    if(message){
        showSuccessToast(message);
    };

    function showSuccessToast(message) {
        Toastify({
            text: message,
            duration: 5000,
            gravity: "top",
            position: "center",
            backgroundColor: "linear-gradient(to right, #4CAF50, #45a049)",
            stopOnFocus: true,
            className: "success-toast",
        }).showToast();
    }

</script>
<style>
  .small-swal {
    width: 700px;
  }
</style>
<%- include('../layout/adminFooter') %>
